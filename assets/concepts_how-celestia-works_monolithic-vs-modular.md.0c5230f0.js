import{_ as o,o as t,c as e,U as a}from"./chunks/framework.1cfd022e.js";const g=JSON.parse('{"title":"单体 vs. 模块化区块链","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/how-celestia-works/monolithic-vs-modular.md","filePath":"concepts/how-celestia-works/monolithic-vs-modular.md"}'),r={name:"concepts/how-celestia-works/monolithic-vs-modular.md"},s=a('<h1 id="单体-vs-模块化区块链" tabindex="-1">单体 vs. 模块化区块链 <a class="header-anchor" href="#单体-vs-模块化区块链" aria-label="Permalink to &quot;单体 vs. 模块化区块链&quot;">​</a></h1><p>区块链实例化<a href="https://dl.acm.org/doi/abs/10.1145/98163.98167" target="_blank" rel="noreferrer">复制状态机</a>：在一个无需许可的分布式网络中，节点对初始状态应用有序的确定性交易序列，最终得到一个相同的最终状态。这意味着区块链需要以下四个功能:</p><ul><li><strong>执行</strong>需要正确的执行交易并且更新状态。因此必须确保只执行有效的交易，即导致有效状态机转换的交易。</li><li><strong>结算</strong>用来提供执行层验证证明、解决欺诈争议和桥接其他执行层的环境。</li><li><strong>共识</strong>就交易顺序达成一致。</li><li><strong>数据可用性</strong>用来确保交易数据的可用性。需要注意的是，执行、结算和共识都依赖数据可用性。</li></ul><p>传统的区块链即整体区块链讲所有四个功能都集中在单一的基础共识层中。单体区块链的问题在于共识层必须执行多种不同的任务，无法针对这些功能的某一个进行优化。结果导致单体范式限制了系统的吞吐量。</p><p><img src="https://docs.celestia.org/assets/images/monolithic-modular-c078dd91fd68b8e6a168ca8bbccfd3d8.png" alt="Modular VS Monolithic"></p><p>作为解决方案，模块化区块链将这些功能分离到多个专用层中作为模块化堆栈的一部分。由于专业化提供的灵活性，这些堆栈可以有很多种不同的排列方式。例如，一种排列方式是将这四个功能分别放置在三个专用层中。</p><p>基础层包括数据可用性（DA）和共识功能，因此被称为共识和数据可用性层（简称为 DA 层），而结算和执行功能则独立放置在其自己的层中。这样，每个层都可以专门优化器功能，从而提供系统的吞吐量。此外，这种模块化范式还使得多个执行层（例如<a href="https://vitalik.ca/general/2021/01/05/rollup.html" target="_blank" rel="noreferrer"><code>rollups</code></a>）可以共享相同的结算和数据可用性层。</p>',7),l=[s];function c(i,n,d,p,_,h){return t(),e("div",null,l)}const u=o(r,[["render",c]]);export{g as __pageData,u as default};
