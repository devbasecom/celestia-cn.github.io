import{_ as s,o as a,c as n,U as l}from"./chunks/framework.9243664d.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"developers/prompt-scavenger.md","filePath":"developers/prompt-scavenger.md"}'),p={name:"developers/prompt-scavenger.md"},o=l(`<h1>Prompt scavenger</h1><p>欢迎来到<code>Prompt Scavenger</code>的世界，这是一个游戏，你将使用<code>Celestia Node API</code>和<code>OpenAI GPT-3.5 </code>来解码散落在 Celestia 区块链中的隐藏信息。在本教程中，我们将使用 Golang 来编写游戏的代码。</p><p>通过这个教程，你将获得使用 <code>Celestia Node API</code> 从区块链中获取数据、处理数据并提交新交易的经验。你还将学习如何集成 <code>OpenAI GPT-3.5 API</code>，根据你找到的数据生成有趣的回复。</p><p>如果你准备好开始一段将区块链技术与人工智能的强大能力相结合的冒险之旅，并在过程中学习一些 Golang，那么让我们开始吧！</p><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><p>需要安装或获取以下依赖项：</p><ul><li>Golang</li><li>Celestia 轻节点</li><li>OpenAI GPT3.5 的 API Key</li></ul><h3 id="安装-golang" tabindex="-1">安装 Golang <a class="header-anchor" href="#安装-golang" aria-label="Permalink to &quot;安装 Golang&quot;">​</a></h3><p>参考<a href="./node-tutorial.html#安装-golang">这里</a></p><h3 id="安装-celestia-节点并且运行轻节点" tabindex="-1">安装 Celestia 节点并且运行轻节点 <a class="header-anchor" href="#安装-celestia-节点并且运行轻节点" aria-label="Permalink to &quot;安装 Celestia 节点并且运行轻节点&quot;">​</a></h3><h4 id="安装-celestia-节点" tabindex="-1">安装 Celestia 节点 <a class="header-anchor" href="#安装-celestia-节点" aria-label="Permalink to &quot;安装 Celestia 节点&quot;">​</a></h4><p>参考<a href="./node-tutorial.html#安装-celestia-节点">这里</a></p><h4 id="设置环境变量" tabindex="-1">设置环境变量 <a class="header-anchor" href="#设置环境变量" aria-label="Permalink to &quot;设置环境变量&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">KEYNAME</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scavenger_key</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">NODETYPE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">light</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">NETWORK</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blockspacerace</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">AUTHTYPE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">CORE_IP</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">💡</p><p><code>CORE_IP</code>可以从<a href="https://docs.celestia.org/nodes/blockspace-race/#rpc-endpoints" target="_blank" rel="noreferrer">可用 RPC 端点列表</a>获得</p></div><p>首先为轻节点生成一个钱包</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./cel-key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> $KEYNAME </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node.type</span><span style="color:#A6ACCD;"> $NODETYPE </span><span style="color:#C3E88D;">--p2p.network</span><span style="color:#A6ACCD;"> $NETWORK</span></span></code></pre></div><p>请务必将助记词和你的 <code>celestia1****</code> 地址保存在安全的地方。</p><p>然后，请前往我们的 Discord 服务器，在 Blockspace Race 的 <code>#faucet</code> 频道中请求代币。</p><p>你可以在 <a href="https://testnet.mintscan.io/celestia-incentivized-testnet" target="_blank" rel="noreferrer"><code>Interchain Explorer by Cosmostation</code></a> 上跟踪你收到的代币。只需粘贴你的<code>celestia1****</code> 地址即可查找相应的信息。</p><p>我们将使用 Blockspace Race 测试网络运行这个版本的 Celestia 节点。首先，初始化我们的节点：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">celestia</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">light</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--p2p.network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">blockspacerace</span></span></code></pre></div><p>然后，启动我们的节点：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">celestia</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">light</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--core.ip</span><span style="color:#A6ACCD;"> $CORE_IP </span><span style="color:#C3E88D;">--p2p.network</span><span style="color:#A6ACCD;"> $NETWORK </span><span style="color:#C3E88D;">--gateway.deprecated-endpoints</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gateway</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gateway.addr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">127.0</span><span style="color:#C3E88D;">.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gateway.port</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">26659</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring.accname</span><span style="color:#A6ACCD;"> $KEYNAME</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">💡 提示</p><p><code>--core.ip</code> gRPC 端口默认为 9090，因此如果在命令行中未指定该端口，它将默认为 9090。你可以在 IP 地址后添加端口，或者使用 <code>--core.grpc.port</code> 标志来指定另一个端口，如果你更喜欢的话。</p><p>请查阅<a href="./../nodes/celestia-node.html#ports"><code>ports</code></a>部分以了解在你的计算机上需要打开哪些端口的信息。</p></div><p>现在你的计算机上应该已经有一个正在运行的轻节点。接下来的教程将假设你会在本地构建和运行脚本。</p><h3 id="node-api-认证密钥" tabindex="-1">Node API 认证密钥 <a class="header-anchor" href="#node-api-认证密钥" aria-label="Permalink to &quot;Node API 认证密钥&quot;">​</a></h3><p>在运行轻节点的机器上运行以下命令:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> AUTH_TOKEN</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">celestia</span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;">$NODETYPE</span><span style="color:#C3E88D;"> auth </span><span style="color:#A6ACCD;">$AUTHTYPE</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> $AUTH_TOKEN</span></span></code></pre></div><p>这将用于我们稍后设置的环境变量文件。</p><h3 id="openai-key" tabindex="-1">OpenAI Key <a class="header-anchor" href="#openai-key" aria-label="Permalink to &quot;OpenAI Key&quot;">​</a></h3><p>请确保前往 <a href="https://openai.com/" target="_blank" rel="noreferrer">OpenAI</a>注册一个账户，并生成 OpenAI API Key 以请求其 API 服务。</p><h2 id="开发-prompt-scavenger" tabindex="-1">开发 Prompt Scavenger <a class="header-anchor" href="#开发-prompt-scavenger" aria-label="Permalink to &quot;开发 Prompt Scavenger&quot;">​</a></h2><p>创建一个<code>.env</code>文件并且将下列内容粘贴进去：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NODE_RPC_IP</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:26658</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">NODE_JWT_TOKEN</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">OPENAI_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">NAMESPACE_ID</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">00000000ce1e571a</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p><code>OPENAI_KEY</code> 是你从 OpenAI 获得的 API Key。对于 <code>NODE_RPC_IP</code>，假设它是本地主机，但它也可以指向远程的轻节点。<code>NODE_JWT_TOKEN</code> 是你之前生成的身份验证令牌（AUTH_TOKEN）。对于 Namespace ID，我们为你提供了一个示例，但你也可以生成自己的。</p><p>现在，让我们开始构建吧！</p><h3 id="复制-go-文件" tabindex="-1">复制 Go 文件 <a class="header-anchor" href="#复制-go-文件" aria-label="Permalink to &quot;复制 Go 文件&quot;">​</a></h3><p>运行下列命令</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_scavenger</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/celestiaorg/PromptScavenger.git</span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PromptScavenger/go.mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_scavenger/</span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PromptScavenger/go.sum</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_scavenger/</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_scavenger</span></span></code></pre></div><p>这将把所需的 <code>go.sum</code> 和 <code>go.mod</code> 文件复制到一个新目录中，我们将在该目录中导入 Node API 的 Golang 库。</p><h3 id="编写-import-内容" tabindex="-1">编写 import 内容 <a class="header-anchor" href="#编写-import-内容" aria-label="Permalink to &quot;编写 import 内容&quot;">​</a></h3><p>在目录内创建一个<code>main.go</code>文件, 并引入所需的库：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">log</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">os</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        nodeheader </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/celestiaorg/celestia-node/header</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/celestiaorg/nmt/namespace</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/joho/godotenv</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        cosmosmath </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">cosmossdk.io/math</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        openai </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/sashabaranov/go-openai</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">encoding/base64</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">encoding/hex</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// TODO</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里，我们设置了所有需要使用的必需库，以及用于游戏的<code>main</code>函数。</p><h3 id="一些有用的函数" tabindex="-1">一些有用的函数 <a class="header-anchor" href="#一些有用的函数" aria-label="Permalink to &quot;一些有用的函数&quot;">​</a></h3><p>首先，我们需要创建一些函数，这些函数在后面的过程中会用到。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// loadEnv loads environment variables from the .env file.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadEnv</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> godotenv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Load</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatal</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error loading .env file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>loadEnv </code>函数允许我们加载<code>.env</code>文件，其中包含了所有必要的环境变量。</p><p>接下来，让我们创建另一个辅助函数，它可以根据传递给它的正确环境变量来加载 Celestia 节点客户端的实例</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// createClient initializes a new Celestia node client.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createClient</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Client </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        nodeRPCIP </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Getenv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NODE_RPC_IP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        jwtToken </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Getenv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NODE_JWT_TOKEN</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        rpc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewClient</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nodeRPCIP</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> jwtToken</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error creating client: %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> rpc</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>正如你所看到的，这里的 <code>Celestia Node Client</code>接收之前设置的 <code>Node RPC IP</code> 和 <code>JWT Token</code>。</p><p>现在，如果我们回到我们的<code>main</code>函数，我们可以按照以下步骤来设置和加载我们的环境变量和客户端：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cancel </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithCancel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Background</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cancel</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">loadEnv</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#A6ACCD;">  client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里，我们设置了一个工作流程，允许我们加载环境变量、使用它实例化客户端，然后关闭客户端。</p><p>现在，让我们构建一些更多有用的函数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNamespaceID</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        nIDString </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Getenv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NAMESPACE_ID</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> hex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DecodeString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nIDString</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error decoding hex string:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Encode the byte array in Base64</span></span>
<span class="line"><span style="color:#A6ACCD;">        base64Str </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> base64</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StdEncoding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EncodeToString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        namespaceID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> base64</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StdEncoding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DecodeString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">base64Str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error decoding Base64 string:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> namespaceID</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里，我们正在创建一个名为<code>createNameSpaceID</code>的函数。给定一个字符串作为<code>namespace ID</code>，它可以将十六进制字符串解码为字节数组，然后再将其编码为 base64 字符串，这是 Node API 所需的格式。</p><p>在我们结束之前，我们还需要创建几个函数。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// postDataAndGetHeight submits a new transaction with the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// provided data to the Celestia node.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">postDataAndGetHeight</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaceID namespace</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> payLoad </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fee cosmosmath</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasLimit </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SubmitPayForBlob</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Background</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> namespa</span></span>
<span class="line"><span style="color:#A6ACCD;">ceID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> payLoad</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fee</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasLimit</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error submitting pay for blob: %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Got output: %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        height </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">uint64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Height that data was submitted at: %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> height</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在函数 <code>postDataAndGetHeight</code> 中，我们展示了如何向 Celestia 的特定<code>namespace ID</code> 提交消息。在成功提交后，该函数会返回提交时所在的区块高度。</p><p>接下来，实现以下函数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDataAsPrompt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaceID namespace</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        headerParam </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getHeader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Share</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetSharesByNamespace</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Background</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> hea</span></span>
<span class="line"><span style="color:#A6ACCD;">derParam</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DAH</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaceID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Fatalf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error getting shares by namespace data for block height:</span></span>
<span class="line"><span style="color:#C3E88D;"> %v. Error is %v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> dataString </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> shares </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> share </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">range</span><span style="color:#A6ACCD;"> shares</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Shares </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        dataString </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">share</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">:])</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> dataString</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在<code>getDataAsPrompt</code>函数中，给定一个特定的区块高度和一个<code>namespace ID</code>，它可以返回该区块的数据（在此称为 shares），然后将其转换为字符串并返回。</p><p>最后，我们实现了一个 <code>GPT-3.5</code> 的辅助函数，对给定的<code>prompt</code>进行应答。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// gpt3 processes a given message using GPT-3 and prints the response.</span></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gpt3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg </span><span style="color:#C792EA;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Set the authentication header</span></span>
<span class="line"><span style="color:#A6ACCD;">        openAIKey </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Getenv</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">OPENAI_KEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        client </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> openai</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewClient</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">openAIKey</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateChatCompletion</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Background</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                openai</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ChatCompletionRequest</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        Model</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> openai</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GPT3Dot5Turbo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                        Messages</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">openai</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ChatCompletionMessage</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        Role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    openai</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ChatMessageRoleUser</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        Content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ChatCompletion error: %v</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Choices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">Message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="封装函数" tabindex="-1">封装函数 <a class="header-anchor" href="#封装函数" aria-label="Permalink to &quot;封装函数&quot;">​</a></h3><p>现在，我们将更新我们的<code>main</code>函数，包含我们构建的函数中的逻辑，向你展示如何执行以下操作：</p><ul><li>实例化<code>namespace ID</code>、<code>gas fee</code>、<code>gas limit</code>和 <code>GPT prompt</code></li><li>将<code>GPT prompt</code>作为<code>PayForBlob</code>交易提交，并获得返回的区块高度</li><li>从该区块高度以<code>Data Share</code>的形式获取<code>prompt</code>，并将其转换为字符串并返回</li><li>将该字符串提交到 <code>gpt3</code> 函数，以获取输出。</li></ul><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cancel </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithCancel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Background</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">defer</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cancel</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">loadEnv</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> namespaceID namespace</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNamespaceID</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        client </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createClient</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> gasLimit </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6000000</span></span>
<span class="line"><span style="color:#A6ACCD;">        fee </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> cosmosmath</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> gptPrompt </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What are modular blockchains?</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        prompt </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0x00</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x01</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x02</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        prompt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prompt</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">gptPrompt</span><span style="color:#89DDFF;">)...)</span></span>
<span class="line"><span style="color:#A6ACCD;">        height </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">postDataAndGetHeight</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaceID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> prompt</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fee</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gasLimit</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        promptString </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDataAsPrompt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaceID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">gpt3</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">promptString</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#A6ACCD;">        client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在，你已经拥有了游戏的最终版本！</p><p>使用以下命令运行 Golang 程序：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main.go</span></span></code></pre></div><p>在一段时间后，它将会先把<code>prompt</code>发布到区块链，然后从区块链中获取到发布的<code>prompt</code>，再从 OpenAI 获取输出。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>通过这个教程，你成功构建了一个 PFB 交易，将其提交到 Celestia，然后从 Celestia 获取并解码其内容，最后作为额外步骤，将消息提交给 GPT-3.5。</p><p>在接下来的步骤中，我们将发布针对这个教程的任务，用户需要完成这些挑战，帮助他们熟悉 Celestia 的数据可用性层。</p>`,77),e=[o];function t(c,r,D,y,F,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
